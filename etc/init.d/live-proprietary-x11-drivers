#!/bin/bash
### BEGIN INIT INFO
# Provides:		  live-proprietary-x11-drivers
# Required-Start:	$local_fs $remote_fs
# Required-Stop:	 $local_fs $remote_fs
# Default-Start:	 2 3 4 5
# Default-Stop:	  0 1 6
# Short-Description: enables proprietary X11 drivers
# Description:	   enables proprietary X11 drivers (NVIDIA or ATI) where available
# X-Start-Before:	kdm gdm
### END INIT INFO
#
# description: enables proprietary X11 drivers
#

set -x
LOG=/var/log/proprietary_x11_driver.log

# paths
DRIVERS="nvidia_current nvidia_legacy_173xx fglrx xorg"
ID_FILE_nvidia_current="/usr/lib/nvidia/current/nvidia.ids"
ID_FILE_nvidia_legacy_173xx="/usr/lib/nvidia/legacy-173xx/nvidia.ids"
ID_FILE_fglrx=" /usr/share/fglrx/fglrx.ids"

setNoDisplay()
{
	DESKTOP_FILE="${1}"
	if [ -f "${DESKTOP_FILE}" ]
	then
		VALUE="${2}"
		if grep -q ^NoDisplay= "${DESKTOP_FILE}"
		then
			# the desktop file already has a "NoDisplay=" line
			sed -i "s|^NoDisplay=.*|NoDisplay=${VALUE}|" "${DESKTOP_FILE}"
		else
			# the desktop file has NO "NoDisplay=" line yet
			echo "NoDisplay=${VALUE}" >> "${DESKTOP_FILE}"
		fi
	fi
}

showApplication()
{
	echo "showing ${1}" >>${LOG}
	setNoDisplay "${1}" "false"
}

hideApplication()
{
	echo "hiding ${1}" >>${LOG}
	setNoDisplay "${1}" "true"
}

activate_nvidia()
{
	# use nvidia glx
	update-alternatives --set glx /usr/lib/nvidia >>${LOG}

	# show NVIDIA settings in menu
	showApplication /usr/share/applications/nvidia-settings.desktop

	# hide krandrtray (xrandr just does not work with NVIDIA cards)
	hideApplication /usr/share/applications/kde4/krandrtray.desktop

	# activating NVIDIA implies removing ATI settings
	remove_fglrx_settings

	# create minimal xorg.conf to enforce usage of the nvidia driver
	cat > /etc/X11/xorg.conf << EOF
Section "Device"
	Identifier	"Configured Video Device"
	Driver	    "nvidia"
	Option	    "NoLogo" "true"
EndSection
EOF
}

activate_nvidia_current()
{
	# use nvidia xorg driver
	update-alternatives --set nvidia /usr/lib/nvidia/current

	activate_nvidia
}

activate_nvidia_legacy_173xx()
{
	# use nvidia xorg driver
	update-alternatives --set nvidia /usr/lib/nvidia/legacy-173xx

	activate_nvidia
}

activate_fglrx()
{
	# use fglrx glx
	update-alternatives --set glx /usr/lib/fglrx >>${LOG}

	# show ATI settings in menu
	showApplication /usr/share/applications/amdcccle.desktop

	# show krandrtray
	showApplication /usr/share/applications/kde4/krandrtray.desktop

	# activating ATI implies removing NVIDIA settings
	remove_nvidia_settings

	# create minimal xorg.conf to enforce usage of the fglrx driver
	cat > /etc/X11/xorg.conf << EOF
Section "Device"
	Identifier	"Configured Video Device"
	Driver	    "fglrx"
EndSection
EOF
}

activate_xorg()
{

	# remove nvidia and fglrx kernel modules in case they somehow 
	# got loaded
	rmmod nvidia
	rmmod fglrx

	# use mesa glx
	update-alternatives --set glx /usr/lib/mesa-diverted >>${LOG}

	# show krandrtray
	showApplication /usr/share/applications/kde4/krandrtray.desktop

	# remove ATI and NVIDIA settings
	remove_fglrx_settings
	remove_nvidia_settings
}

remove_fglrx_settings()
{
	# remove ATI settings from menu
	hideApplication /usr/share/applications/amdcccle.desktop
}

remove_nvidia_settings()
{
	# remove NVIDIA settings from menu
	hideApplication /usr/share/applications/nvidia-settings.desktop
}

find_driver() {
	# only first device, machines with multiple devices are currently not handled
	DEVICE=$(lspci -mn | awk '{ gsub("\"",""); if ($2 == "0300") { print $3$4 } }' | tr a-z A-Z | head -1)

	for d in $DRIVERS ; do
		ID_FILE_VAR=ID_FILE_$d
		ID_FILE=${!ID_FILE_VAR}
		if [ -z "$ID_FILE" ] || grep -qis $DEVICE $ID_FILE ; then
		    echo $d
		    return
		fi
	done
}


# only run this when entering the runlevel
[ "${1}" != "start" ] && exit 0

# remove old xorg.conf
rm -f /etc/X11/xorg.conf
rm -f /etc/X11/xorg.conf.d/zz-live-config_xserver-xorg.conf

# reset log file
>${LOG}

# Using fglrx or nvidia has (so far) failed on all systems with several Display controllers.
# Therefore we select xorg here if we detect more than one Display controller.
if [ $(lspci -mn | awk '{ gsub ("\"",""); { print $2 } }' | grep -c ^03) -ne 1 ]
then
	echo "several Display controllers found, aborting..." >>${LOG}
	activate_xorg >>${LOG} 2>&1
	exit 0
fi

DRIVER=$(find_driver)
activate_$DRIVER
